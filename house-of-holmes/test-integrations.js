#!/usr/bin/env node

/**
 * Integration Test Script
 * ======================
 * 
 * This script tests all integrations to ensure they're working properly.
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ House of Holmes - Integration Testing');
console.log('========================================\n');

// Check .env file
const envPath = path.join(__dirname, '.env');
if (!fs.existsSync(envPath)) {
  console.log('‚ùå .env file not found!');
  console.log('Please run the configuration scripts first.\n');
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf8');
const lines = envContent.split('\n');

console.log('üìã Testing Configuration...\n');

// Test Odoo Configuration
console.log('1Ô∏è‚É£ ODOO INTEGRATION');
console.log('-------------------');
const odooUrl = lines.find(line => line.startsWith('REACT_APP_ODOO_URL='));
const odooDb = lines.find(line => line.startsWith('REACT_APP_ODOO_DB='));
const odooUser = lines.find(line => line.startsWith('REACT_APP_ODOO_USERNAME='));
const odooPass = lines.find(line => line.startsWith('REACT_APP_ODOO_PASSWORD='));

if (odooUrl && odooDb && odooUser && odooPass) {
  console.log('‚úÖ Odoo configuration found');
  console.log(`   URL: ${odooUrl.split('=')[1]}`);
  console.log(`   Database: ${odooDb.split('=')[1]}`);
  console.log(`   Username: ${odooUser.split('=')[1]}`);
} else {
  console.log('‚ùå Odoo configuration incomplete');
}

// Test Formspree Configuration
console.log('\n2Ô∏è‚É£ FORMSPREE (Contact Form)');
console.log('---------------------------');
const formspreeId = lines.find(line => line.startsWith('REACT_APP_FORMSPREE_ID='));

if (formspreeId && !formspreeId.includes('your_')) {
  console.log('‚úÖ Formspree configuration found');
  console.log(`   Form ID: ${formspreeId.split('=')[1]}`);
} else {
  console.log('‚ùå Formspree configuration missing or using placeholder');
}

// Test Google Calendar Configuration
console.log('\n3Ô∏è‚É£ GOOGLE CALENDAR');
console.log('-------------------');
const calendarApiKey = lines.find(line => line.startsWith('REACT_APP_GOOGLE_CALENDAR_API_KEY='));
const calendarId = lines.find(line => line.startsWith('REACT_APP_GOOGLE_CALENDAR_ID='));

if (calendarApiKey && !calendarApiKey.includes('your_')) {
  console.log('‚úÖ Google Calendar API key configured');
} else {
  console.log('‚ùå Google Calendar API key missing or using placeholder');
}

if (calendarId && !calendarId.includes('your_')) {
  console.log('‚úÖ Google Calendar ID configured');
} else {
  console.log('‚ùå Google Calendar ID missing or using placeholder');
}

// Test Social Media Configuration
console.log('\n4Ô∏è‚É£ SOCIAL MEDIA APIs');
console.log('-------------------');
const instagramToken = lines.find(line => line.startsWith('REACT_APP_INSTAGRAM_TOKEN='));
const facebookToken = lines.find(line => line.startsWith('REACT_APP_FACEBOOK_TOKEN='));
const linkedinToken = lines.find(line => line.startsWith('REACT_APP_LINKEDIN_TOKEN='));

if (instagramToken && !instagramToken.includes('your_')) {
  console.log('‚úÖ Instagram token configured');
} else {
  console.log('‚ùå Instagram token missing or using placeholder');
}

if (facebookToken && !facebookToken.includes('your_')) {
  console.log('‚úÖ Facebook token configured');
} else {
  console.log('‚ùå Facebook token missing or using placeholder');
}

if (linkedinToken && !linkedinToken.includes('your_')) {
  console.log('‚úÖ LinkedIn token configured');
} else {
  console.log('‚ùå LinkedIn token missing or using placeholder');
}

// Test Microsoft Outlook Configuration
console.log('\n5Ô∏è‚É£ MICROSOFT OUTLOOK');
console.log('-------------------');
const msClientId = lines.find(line => line.startsWith('REACT_APP_MICROSOFT_CLIENT_ID='));
const msTenantId = lines.find(line => line.startsWith('REACT_APP_MICROSOFT_TENANT_ID='));
const msClientSecret = lines.find(line => line.startsWith('REACT_APP_MICROSOFT_CLIENT_SECRET='));

if (msClientId && !msClientId.includes('your_')) {
  console.log('‚úÖ Microsoft Client ID configured');
} else {
  console.log('‚ùå Microsoft Client ID missing or using placeholder');
}

if (msTenantId && !msTenantId.includes('your_')) {
  console.log('‚úÖ Microsoft Tenant ID configured');
} else {
  console.log('‚ùå Microsoft Tenant ID missing or using placeholder');
}

if (msClientSecret && !msClientSecret.includes('your_')) {
  console.log('‚úÖ Microsoft Client Secret configured');
} else {
  console.log('‚ùå Microsoft Client Secret missing or using placeholder');
}

// Summary
console.log('\nüìä INTEGRATION SUMMARY');
console.log('======================');
console.log('‚úÖ Ready to use:');
console.log('   ‚Ä¢ Odoo Integration');
console.log('   ‚Ä¢ Formspree (Contact Form)');
console.log('\n‚è≥ Needs configuration:');
console.log('   ‚Ä¢ Google Calendar (API Key)');
console.log('   ‚Ä¢ Social Media APIs (Tokens)');
console.log('   ‚Ä¢ Microsoft Outlook (Azure Credentials)');

console.log('\nüöÄ NEXT STEPS:');
console.log('==============');
console.log('1. Run: npm start');
console.log('2. Test the working integrations');
console.log('3. Configure the missing integrations using:');
console.log('   ‚Ä¢ node setup-google-calendar.js');
console.log('   ‚Ä¢ node setup-social-media.js');
console.log('   ‚Ä¢ node setup-microsoft-outlook.js');
console.log('4. Test all integrations again');
console.log('5. Deploy to production');

console.log('\nüéâ Integration testing complete!'); 